# .github/workflows/main_conversion_workflow.yml
name: Main Conversion Workflow (Triggered by Version File)

on:
  push:
    paths:
      - 'conversation/Temp/version.txt' # Triggers ONLY when version.txt is created/modified and pushed

jobs:
  run_full_conversion:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Download conversion artifacts
        uses: actions/download-artifact@v3
        with:
          name: conversion-data
          path: conversation/Temp/ # Download artifacts to this path

      - name: Create Log Entry for Main Workflow Start (Version Triggered)
        run: |
          mkdir -p conversation/Logs
          echo "$(date +"%Y-%m-%d %H:%M:%S") - Main conversion workflow triggered by version.txt." >> conversation/Logs/workflow_activity.log
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add conversation/Logs/workflow_activity.log
          git commit -m "Log: Main workflow triggered by version.txt." || echo "No new log entry commit."
          git push || echo "Log push failed."

      - name: Verify temp_conversion.db exists before Phase 2
        run: |
          TEMP_DB_FILE="conversation/Temp/temp_conversion.db"
          if [ ! -f "$TEMP_DB_FILE" ]; then
            echo "Error: temp_conversion.db not found after downloading artifact. Aborting Phase 2 conversion."
            exit 1
          fi
          echo "temp_conversion.db found. Proceeding with Phase 2."

      - name: Set up Python for Phase 2
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Required Python Packages for Phase 2
        run: pip install pandas openpyxl sqlite-utils

      - name: Run Phase 2 Conversion, Zip and Finalize
        run: |
          python3 <<EOF
          import sqlite3
          import os
          from datetime import datetime
          import zipfile
          import traceback
          import sys

          try:
              db_name_temp = "conversation/Temp/temp_conversion.db"
              
              os.makedirs("conversation/Ready", exist_ok=True)
              log_path = "conversation/Logs/workflow_activity.log" # Log to the central activity log

              with open(log_path, "a") as logfile:
                  now = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
                  logfile.write(f"{now} Phase 2 Conversion Started: Finalizing DB and Zipping.\n")

              timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
              version_name = f"DB_Version_{timestamp}"
              db_target = f"conversation/Ready/{version_name}.db"

              os.rename(db_name_temp, db_target) # Rename temp DB to final name

              with sqlite3.connect(db_target) as conn:
                  conn.execute("CREATE TABLE IF NOT EXISTS databaseversion (DBversion TEXT)")
                  conn.execute("DELETE FROM databaseversion")
                  conn.execute("INSERT INTO databaseversion (DBversion) VALUES (?)", (version_name,))
                  conn.commit()
                  conn.execute("VACUUM;")

              zip_name = f"conversation/Ready/{version_name}.zip"
              with zipfile.ZipFile(zip_name, 'w', zipfile.ZIP_DEFLATED) as zipf:
                  zipf.write(db_target, os.path.basename(db_target))

              os.remove(db_target) # Remove the .db file after zipping

              with open(log_path, "a") as logfile:
                  now = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
                  logfile.write(f"{now} Phase 2 Complete. Version '{version_name}' applied and final ZIP created: {zip_name.split('/')[-1]}.\n")
                  logfile.write(f"{now} Full Conversion Workflow Complete.\n")

          except Exception as e:
              log_path_error = "conversation/Logs/workflow_activity.log"
              with open(log_path_error, "a") as logfile:
                  now = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
                  logfile.write(f"{now} ERROR: Phase 2 Conversion Failed: {str(e)}\n")
                  logfile.write(traceback.format_exc())
              sys.exit(1) # Fail the job if conversion fails
          EOF
        env:
          PYTHONUNBUFFERED: 1

      - name: Commit Finalized Files and Clean Up All Source Files
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          
          # Add the newly created finalized ZIP file and updated log file
          git add conversation/Ready/*.zip
          git add conversation/Logs/workflow_activity.log
          
          # Remove source Excel files (temp_conversion.db and version.txt are not in repo, so no git rm needed)
          git rm conversation/csv/scanning.xlsx || true
          git rm conversation/csv/prices.xlsx || true
          
          git commit -m "Full Conversion Finalized: Created ZIP, cleaned up source files."
          git push
