# .github/workflows/update_file_status.yml
name: Update File Upload Status

on:
  push:
    paths:
      - 'conversation/csv/scanning.xlsx' # Triggers when scanning.xlsx is pushed
      - 'conversation/csv/prices.xlsx'   # Triggers when prices.xlsx is pushed

jobs:
  update_status_marker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Determine which file was pushed
        id: get_file_type
        run: |
          # Detect which file path was changed
          # Using git diff HEAD~1 HEAD to compare current commit with previous one
          # This is more reliable than just checking single file existence
          if git diff --name-only HEAD~1 HEAD | grep -q "conversation/csv/scanning.xlsx"; then
            echo "file_type=scanning" >> "$GITHUB_OUTPUT"
            echo "Detected file push: scanning.xlsx"
          elif git diff --name-only HEAD~1 HEAD | grep -q "conversation/csv/prices.xlsx"; then
            echo "file_type=prices" >> "$GITHUB_OUTPUT"
            echo "Detected file push: prices.xlsx"
          else
            echo "file_type=unknown" >> "$GITHUB_OUTPUT"
            echo "Could not determine which file was pushed."
          fi

      - name: Update file_ready_status.txt with Python
        run: |
          python3 <<EOF
          import os
          from datetime import datetime
          import sys # Import sys for debugging prints

          file_type = "${{ steps.get_file_type.outputs.file_type }}"
          status_file_path = "conversation/Temp/file_ready_status.txt"
          
          print(f"DEBUG: Processing file_type: {file_type}", file=sys.stderr)
          print(f"DEBUG: Status file path: {status_file_path}", file=sys.stderr)

          # Ensure directory exists
          os.makedirs(os.path.dirname(status_file_path), exist_ok=True)

          statuses = {}
          # Read existing statuses
          if os.path.exists(status_file_path):
              try:
                  with open(status_file_path, 'r') as f:
                      for line in f:
                          line = line.strip()
                          if line and ':' in line:
                              key, value = line.split(':', 1)
                              statuses[key.strip()] = value.strip()
                  print(f"DEBUG: Existing statuses read: {statuses}", file=sys.stderr)
              except Exception as e:
                  print(f"ERROR: Could not read existing status file: {e}", file=sys.stderr)
          else:
              print(f"DEBUG: Status file does not exist, creating new.", file=sys.stderr)
          
          # Update the status for the pushed file type with a timestamp
          current_timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
          if file_type == "scanning":
              statuses['scanning_ready'] = f"true_{current_timestamp}"
          elif file_type == "prices":
              statuses['prices_ready'] = f"true_{current_timestamp}"
          else:
              print(f"WARNING: Unknown file type '{file_type}', not updating status.", file=sys.stderr)
          
          print(f"DEBUG: Updated statuses to write: {statuses}", file=sys.stderr)

          # Write updated statuses back to file, ensuring a clean format
          try:
              # Using 'w' mode will overwrite the file. Ensure sorted keys for consistent output.
              with open(status_file_path, 'w') as f:
                  for key, value in sorted(statuses.items()):
                      line_to_write = f"{key}:{value}\n"
                      f.write(line_to_write)
                      print(f"DEBUG: Wrote line: {line_to_write.strip()}", file=sys.stderr)
              print(f"Status for {file_type} updated successfully in {status_file_path}.", file=sys.stderr)
          except Exception as e:
              print(f"ERROR: Could not write to status file: {e}", file=sys.stderr)
              sys.exit(1) # Fail the job if writing fails
          
          EOF

      - name: Verify file content locally
        run: |
          echo "--- Content of file_ready_status.txt before commit ---"
          cat conversation/Temp/file_ready_status.txt
          echo "----------------------------------------------------"
          if [ ! -s conversation/Temp/file_ready_status.txt ]; then
            echo "Error: file_ready_status.txt is empty or does not exist after Python script."
            exit 1
          fi

      - name: Commit file_ready_status.txt changes and push
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          
          # Stage the file
          git add conversation/Temp/file_ready_status.txt
          
          # Check if there are any changes to commit
          if git diff --cached --exit-code --quiet; then
            echo "No changes detected for file_ready_status.txt, skipping commit/push."
          else
            # Try to commit, if it fails, maybe there's already a pending commit
            # Use 'git commit -m ... || true' to allow job to continue even if commit fails due to no changes
            git commit -m "Updated file ready status for ${{ steps.get_file_type.outputs.file_type }} with timestamp." || echo "Commit failed, possibly no changes."
            
            # Check if previous commit was empty and amend if needed
            if [ "$(git log -1 --pretty=format:%B | grep "Updated file ready status for")" ]; then
              if git diff --cached --exit-code --quiet; then
                 echo "Previous commit was empty, will try to amend."
                 git commit --amend --no-edit || echo "Could not amend, maybe no changes after all."
              fi
            fi

            # Push the changes. --force-with-lease is safer than --force
            echo "Attempting to push changes to branch: ${{ github.ref }}"
            git push origin HEAD:"${{ github.ref }}" || echo "Push failed, retrying with force-with-lease."
            git push --force-with-lease origin HEAD:"${{ github.ref }}" || { echo "Final push attempt failed. Please check repository history."; exit 1; }
            echo "Changes pushed successfully."
          fi
