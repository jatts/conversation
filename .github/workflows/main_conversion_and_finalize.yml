# .github/workflows/main_conversion_workflow.yml
name: Main Conversion Workflow (Dispatched)

on:
  workflow_dispatch: # This workflow will now be triggered by workflow_dispatch events

jobs:
  run_full_conversion:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Create Log Entry for Main Workflow Start (Dispatched)
        run: |
          mkdir -p conversation/Logs # Ensure Logs directory exists
          echo "$(date +"%Y-%m-%d %H:%M:%S") - Main conversion workflow started via dispatch." >> conversation/Logs/workflow_activity.log
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add conversation/Logs/workflow_activity.log
          git commit -m "Log: Main workflow dispatched and started." || echo "No new log entry commit."
          git push || echo "Log push failed."

      - name: Verify both actual data files exist before starting conversion
        run: |
          SCANNING_FILE="conversation/csv/scanning.xlsx"
          PRICES_FILE="conversation/csv/prices.xlsx"
          
          if [ ! -f "$SCANNING_FILE" ]; then
            echo "Error: scanning.xlsx not found. Aborting conversion."
            exit 1
          fi
          if [ ! -f "$PRICES_FILE" ]; then
            echo "Error: prices.xlsx not found. Aborting conversion."
            exit 1
          fi
          echo "Both scanning.xlsx and prices.xlsx found. Proceeding with conversion."

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Required Python Packages
        run: pip install pandas openpyxl sqlite-utils

      - name: Run Full Conversion (Phase 1 & Phase 2 Logic)
        run: |
          python3 <<EOF
          import pandas as pd
          import sqlite3
          import os
          from datetime import datetime
          import zipfile
          import traceback

          try:
              scan_file = "conversation/csv/scanning.xlsx"
              price_file = "conversation/csv/prices.xlsx"
              
              os.makedirs("conversation/Temp", exist_ok=True)
              os.makedirs("conversation/Ready", exist_ok=True)
              log_path = "conversation/Temp/conversion_log.txt"

              with open(log_path, "w") as logfile:
                  now = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
                  logfile.write(f"{now} Full Conversion Workflow Started.\n")
                  logfile.write(f"{now} Reading input files.\n")

              scan_df = pd.read_excel(scan_file)
              price_df = pd.read_excel(price_file)

              price_df["OriginalPrice"] = pd.to_numeric(price_df["OriginalPrice"], errors='coerce')
              price_df = price_df[["Barcode", "OriginalPrice"]]

              merged_df = pd.merge(scan_df, price_df, on="Barcode", how="left")

              merged_df["OriginalPrice"] = merged_df["OriginalPrice"].apply(
                  lambda x: str(int(x)) if pd.notna(x) and x == int(x) else ('' if pd.isna(x) else str(x))
              )

              final_columns = ["Barcode", "Article", "Percentage", "OriginalPrice"]
              merged_df = merged_df[final_columns]

              db_name_temp = "conversation/Temp/temp_conversion.db"
              conn = sqlite3.connect(db_name_temp)
              merged_df.to_sql("sc", conn, if_exists="replace", index=False, dtype={'OriginalPrice': 'TEXT'})
              conn.commit()
              conn.execute("VACUUM;")
              conn.close()

              with open(log_path, "a") as logfile:
                  now = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
                  logfile.write(f"{now} Phase 1: Data merged and temporary DB created: {db_name_temp}.\n")

              timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
              version_name = f"DB_Version_{timestamp}"
              db_target = f"conversation/Ready/{version_name}.db"

              os.rename(db_name_temp, db_target)

              with sqlite3.connect(db_target) as conn:
                  conn.execute("CREATE TABLE IF NOT EXISTS databaseversion (DBversion TEXT)")
                  conn.execute("DELETE FROM databaseversion")
                  conn.execute("INSERT INTO databaseversion (DBversion) VALUES (?)", (version_name,))
                  conn.commit()
                  conn.execute("VACUUM;")

              zip_name = f"conversation/Ready/{version_name}.zip"
              with zipfile.ZipFile(zip_name, 'w', zipfile.ZIP_DEFLATED) as zipf:
                  zipf.write(db_target, os.path.basename(db_target))

              os.remove(db_target)

              with open(log_path, "a") as logfile:
                  now = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
                  logfile.write(f"{now} Phase 2: Version '{version_name}' applied and final ZIP created: {zip_name.split('/')[-1]}.\n")
                  logfile.write(f"{now} Full Conversion Complete.\n")

          except Exception as e:
              os.makedirs("conversation/Temp", exist_ok=True)
              log_path_error = "conversation/Temp/conversion_log.txt"
              with open(log_path_error, "a") as logfile:
                  now = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
                  logfile.write(f"{now} ERROR: Full Conversion Workflow Failed: {str(e)}\n")
                  logfile.write(traceback.format_exc())
              raise
          EOF

      - name: Commit Finalized Files and Clean Up All Temp Files
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          
          git add conversation/Ready/*.zip
          git add conversation/Temp/conversion_log.txt
          
          git rm conversation/csv/scanning.xlsx || true
          git rm conversation/csv/prices.xlsx || true
          git rm conversation/Temp/temp_conversion.db || true
          git rm conversation/Temp/version.txt || true
          
          git commit -m "Full Conversion: Finalized ZIP, cleaned up all temporary files and source data."
          git push