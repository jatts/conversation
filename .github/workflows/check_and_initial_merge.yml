# .github/workflows/check_and_initial_merge.yml
name: Check Files and Initial Merge

on:
  push:
    paths:
      - 'conversation/csv/scanning.xlsx'
      - 'conversation/csv/prices.xlsx'

jobs:
  initial_merge:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository and ensure latest
        uses: actions/checkout@v4 # Use v4 for better performance and options
        with:
          token: ${{ secrets.GITHUB_TOKEN }} # Required for subsequent push
          fetch-depth: 0 # Fetch all history to allow for merges if needed, though we will force push.

      - name: Verify both actual data files exist
        id: check_files
        run: |
          SCANNING_FILE="conversation/csv/scanning.xlsx"
          PRICES_FILE="conversation/csv/prices.xlsx"
          
          if [ -f "$SCANNING_FILE" ] && [ -f "$PRICES_FILE" ]; then
            echo "Both scanning.xlsx and prices.xlsx found. Proceeding with initial merge."
            echo "both_files_exist=true" >> "$GITHUB_OUTPUT"
          else
            echo "One or both Excel files missing. Skipping initial merge for now."
            echo "both_files_exist=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Set up Python for Initial Merge
        if: steps.check_files.outputs.both_files_exist == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Required Python Packages for Initial Merge
        if: steps.check_files.outputs.both_files_exist == 'true'
        run: pip install pandas openpyxl

      - name: Run Initial Merge and Create version.txt
        if: steps.check_files.outputs.both_files_exist == 'true'
        run: |
          python3 <<EOF
          import pandas as pd
          import os
          from datetime import datetime
          import sys
          import traceback
          import math

          try:
              scan_file = "conversation/csv/scanning.xlsx"
              price_file = "conversation/csv/prices.xlsx"
              
              os.makedirs("conversation/Temp", exist_ok=True)
              log_path = "conversation/Logs/workflow_activity.log"

              with open(log_path, "a") as logfile:
                  now = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
                  logfile.write(f"{now} Both files received. Starting initial merge.\n")

              scan_df = pd.read_excel(scan_file)
              price_df = pd.read_excel(price_file)

              price_df["OriginalPrice"] = pd.to_numeric(price_df["OriginalPrice"], errors='coerce')
              price_df = price_df[["Barcode", "OriginalPrice"]]

              merged_df = pd.merge(scan_df, price_df, on="Barcode", how="left")

              def format_price(price):
                  if pd.isna(price):
                      return ''
                  elif isinstance(price, (int, float)) and price == int(price):
                      return str(int(price))
                  else:
                      return str(price)

              merged_df["OriginalPrice"] = merged_df["OriginalPrice"].apply(format_price)

              final_columns = ["Barcode", "Article", "Percentage", "OriginalPrice"]
              merged_df = merged_df[final_columns]

              merged_csv_path = "conversation/Temp/merging_temp.csv"
              merged_df.to_csv(merged_csv_path, index=False)

              version_file_path = "conversation/Temp/version.txt"
              timestamp_for_version = datetime.now().strftime("DB_Version_%Y%m%d_%H%M%S")
              with open(version_file_path, 'w') as f:
                  f.write(timestamp_for_version + "\n")
              
              with open(log_path, "a") as logfile:
                  now = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
                  logfile.write(f"{now} Merging complete. {os.path.basename(merged_csv_path)} created. Version marker file ({os.path.basename(version_file_path)}) created with content: {timestamp_for_version}.\n")

          except Exception as e:
              log_path_error = "conversation/Logs/workflow_activity.log"
              with open(log_path_error, "a") as logfile:
                  now = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
                  logfile.write(f"{now} ERROR: Initial Merge Failed: {str(e)}\n")
                  logfile.write(traceback.format_exc())
              sys.exit(1)
          EOF
        env:
          PYTHONUNBUFFERED: 1

      - name: Commit and Push All Generated Files
        if: steps.check_files.outputs.both_files_exist == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          
          # Add all potentially new or modified files
          git add conversation/Temp/merging_temp.csv
          git add conversation/Temp/version.txt
          git add conversation/Logs/workflow_activity.log
          
          # Check if there are any changes to commit. If not, don't commit to avoid empty commits or errors.
          if git diff --staged --quiet; then
              echo "No changes to commit from this step."
          else
              # Commit the changes. A merge commit will not be created here,
              # but direct changes will be committed.
              git commit -m "Initial Merge: Created merging_temp.csv, version.txt, and updated logs."
          fi
          
          # Since other workflows might push logs concurrently, we'll force push.
          # --force-with-lease is safer than --force as it checks remote state.
          # However, to avoid any potential "diverged" errors in this specific setup
          # where we want the *current* workflow's output to be definitive,
          # a direct force push might be necessary.
          # We'll use --force, but please be aware of its implications.
          git push --force 
