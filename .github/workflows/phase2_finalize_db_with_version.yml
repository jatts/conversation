# .github/workflows/phase2_finalize_db_with_version.yml
name: Phase 2 - Finalize SQLite ZIP with Version

on:
  push:
    paths:
      - 'conversation/Temp/version.txt' # This workflow triggers ONLY on version.txt push

jobs:
  finalize_db_with_version:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Required Python Packages
        run: pip install sqlite-utils

      - name: Rename Temp DB, Zip It, Update Logs
        run: |
          python3 <<EOF
          import sqlite3
          import zipfile
          import os
          from datetime import datetime
          import traceback

          try:
              version_path = "conversation/Temp/version.txt"
              db_source = "conversation/Temp/temp.db"
              log_path = "conversation/Temp/conversion_log.txt"

              # Check if necessary files exist
              if not os.path.exists(version_path):
                  raise FileNotFoundError(f"Error: version.txt not found at {version_path}. Please upload version.txt to trigger finalization.")
              if not os.path.exists(db_source):
                  raise FileNotFoundError(f"Error: temp.db not found at {db_source}. Phase 1 must complete successfully first.")

              # --- FIX STARTS HERE ---
              # Read version_name from the file BEFORE it's used
              with open(version_path, "r") as vfile:
                  version_name = vfile.read().strip() # <--- This line defines 'version_name'
              # --- FIX ENDS HERE ---

              os.makedirs("conversation/Ready", exist_ok=True)
              db_target = f"conversation/Ready/{version_name}.db" # Now 'version_name' is defined

              os.rename(db_source, db_target)

              with sqlite3.connect(db_target) as conn:
                  conn.execute("CREATE TABLE IF NOT EXISTS databaseversion (DBversion TEXT)")
                  conn.execute("DELETE FROM databaseversion")
                  conn.execute("INSERT INTO databaseversion (DBversion) VALUES (?)", (version_name,))
                  conn.commit()
                  conn.execute("VACUUM;")

              zip_name = f"conversation/Ready/{version_name}.zip"
              with zipfile.ZipFile(zip_name, 'w', zipfile.ZIP_DEFLATED) as zipf:
                  zipf.write(db_target, os.path.basename(db_target))

              os.remove(db_target) # Remove the .db file after zipping

              with open(log_path, "a") as logfile:
                  now = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
                  logfile.write(f"{now} Phase 2: Finalizing with version: {version_name}\n")
                  logfile.write(f"{now} Phase 2: Finalized DB: {db_target} (removed after zipping), Zipped to: {zip_name}\n")
                  logfile.write(f"{now} Phase 2: Conversion Complete\n")

          except Exception as e:
              os.makedirs("conversation/Temp", exist_ok=True)
              log_path_error = "conversation/Temp/conversion_log.txt"
              with open(log_path_error, "a") as logfile:
                  now = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
                  logfile.write(f"{now} Phase 2: Error occurred during finalization: {str(e)}\n")
                  logfile.write(traceback.format_exc())
              raise
          EOF

      - name: Commit Finalized Files and Clean Up Temp
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          
          git add conversation/Ready/*.zip
          git add conversation/Temp/conversion_log.txt conversation/Temp/version.txt
          
          git rm conversation/Temp/temp.db || true
          git rm conversation/csv/scanning.xlsx || true
          git rm conversation/csv/prices.xlsx || true
          
          git commit -m "Phase 2: Finalized SQLite ZIP and cleaned up unnecessary files, including source CSVs"
          git push
